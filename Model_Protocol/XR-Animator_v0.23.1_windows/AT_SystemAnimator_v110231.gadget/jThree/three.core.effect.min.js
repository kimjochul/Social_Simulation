THREE.MaskPass=function(e,r){this.scene=e,this.camera=r,this.enabled=!0,this.clear=!0,this.needsSwap=!1,this.inverse=!1},THREE.MaskPass.prototype={render:function(e,r,t,s){var i=e.context;i.colorMask(!1,!1,!1,!1),i.depthMask(!1);var a,n;this.inverse?(a=0,n=1):(a=1,n=0),i.enable(i.STENCIL_TEST),i.stencilOp(i.REPLACE,i.REPLACE,i.REPLACE),i.stencilFunc(i.ALWAYS,a,4294967295),i.clearStencil(n),e.render(this.scene,this.camera,t,this.clear),e.render(this.scene,this.camera,r,this.clear),i.colorMask(!0,!0,!0,!0),i.depthMask(!0),i.stencilFunc(i.EQUAL,1,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP)}},THREE.ClearMaskPass=function(){this.enabled=!0},THREE.ClearMaskPass.prototype={render:function(e,r,t,s){var i=e.context;i.disable(i.STENCIL_TEST)}},THREE.RenderPass=function(e,r,t,s,i){this.scene=e,this.camera=r,this.overrideMaterial=t,this.clearColor=s,this.clearAlpha=void 0!==i?i:1,this.oldClearColor=new THREE.Color,this.oldClearAlpha=1,this.enabled=!0,this.clear=!0,this.needsSwap=!1},THREE.RenderPass.prototype={render:function(e,r,t,s){this.scene.overrideMaterial=this.overrideMaterial,this.clearColor&&(this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),e.render(this.scene,this.camera,t,this.clear),this.clearColor&&e.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null}},THREE.ShaderPass=function(e,r){this.textureID=void 0!==r?r:"tDiffuse",this.uniforms=THREE.UniformsUtils.clone(e.uniforms),this.material=new THREE.ShaderMaterial({defines:e.defines||{},uniforms:this.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,blending:THREE.AdditiveBlending}),this.renderToScreen=!1,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)},THREE.ShaderPass.prototype={render:function(e,r,t,s){if(/SOURCE_READBUFFER(\d+)/.test(this.textureID)&&this.uniforms.tDiffuse){var i=MMD_SA_options.MME.PostProcessingEffects,a=parseInt(RegExp.$1),n=i._composers_list[a];if(n._disabled)for(var o=a-1;o>=0;o--)if(!i._composers_list[o]._disabled){n=i._composers_list[o];break}this.uniforms.tDiffuse.value=n._source_readBuffer||n.readBuffer}else this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=t);this.quad.material=this.material,this.renderToScreen?e.render(this.scene,this.camera):e.render(this.scene,this.camera,r,this.clear)}},THREE.TexturePass=function(e,r,t){void 0===THREE.CopyShader&&console.error("THREE.TexturePass relies on THREE.CopyShader");var s=THREE.CopyShader;this.uniforms=THREE.UniformsUtils.clone(s.uniforms),this.uniforms.opacity.value=void 0!==r?r:1,this.uniforms.tDiffuse.value=e,this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:s.vertexShader,fragmentShader:s.fragmentShader,blending:THREE.AdditiveBlending}),this.enabled=!0,this.needsSwap=!1,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)},THREE.TexturePass.prototype={render:function(e,r,t,s){this.quad.material=this.material,e.render(this.scene,this.camera,t)}},THREE.CopyShader={uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")},THREE.EffectComposer=function(e,r,t){if(this._para=t,this.renderer=e,void 0===r){var s=e.getPixelRatio(),i=Math.floor(e.context.canvas.width/s)||1,a=Math.floor(e.context.canvas.height/s)||1,n={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:t&&t.format||THREE.RGBFormat,stencilBuffer:!1};r=new THREE.WebGLRenderTarget(i,a,n)}this.renderTarget1=r,this.renderTarget2=r.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],void 0===THREE.CopyShader&&console.error("THREE.EffectComposer relies on THREE.CopyShader"),this.copyPass=new THREE.ShaderPass(THREE.CopyShader)},THREE.EffectComposer.prototype={swapBuffers:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e},addPass:function(e){this.passes.push(e)},insertPass:function(e,r){this.passes.splice(r,0,e)},render:function(e){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var r,t,s=!1,i=this.passes.length;for(t=0;t<i;t++)if((r=this.passes[t]).enabled){if(r.render(this.renderer,this.writeBuffer,this.readBuffer,e,s),this._buffer_written=!0,r.needsSwap){if(s){var a=this.renderer.context;a.stencilFunc(a.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),a.stencilFunc(a.EQUAL,1,4294967295)}this.swapBuffers()}r instanceof THREE.MaskPass?s=!0:r instanceof THREE.ClearMaskPass&&(s=!1)}},reset:function(e){if(void 0===e){if(e=this.renderTarget1.clone(),this._para){var r=this;Object.getOwnPropertyNames(this._para).forEach(function(t){e[t]=r._para[t]})}var t=this.renderer.getPixelRatio();e.width=Math.floor(this.renderer.context.canvas.width/t),e.height=Math.floor(this.renderer.context.canvas.height/t)}this.renderTarget1.dispose(),this.renderTarget1=e,this.renderTarget2.dispose(),this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},setSize:function(e,r){this.renderTarget1.setSize(e,r),this.renderTarget2.setSize(e,r)}};